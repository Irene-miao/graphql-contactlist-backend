{"version":3,"sources":["queries.js","components/Persons.js","components/PersonForm.js","components/Notify.js","components/PhoneForm.js","components/LoginForm.js","components/RegisterForm.js","App.js","index.js"],"names":["PERSON_DETAILS","gql","ALL_PERSONS","FIND_PERSON","CREATE_PERSON","EDIT_NUMBER","LOGIN","PERSON_ADDED","CREATE_USER","Persons","persons","show","setError","useLazyQuery","onError","error","getPerson","result","useState","person","setPerson","useEffect","data","findPerson","name","address","street","city","phone","onClick","map","p","variables","nameToSearch","PersonForm","updateCacheWith","setName","setPhone","setStreet","setCity","useMutation","graphQLErrors","message","update","store","response","addPerson","createPerson","onSubmit","event","preventDefault","length","value","onChange","target","type","Notify","errorMessage","style","color","PhoneForm","changeNumber","editNumber","LoginForm","setToken","username","setUsername","password","setPassword","login","token","localStorage","setItem","submit","a","RegisterForm","createUser","App","page","setPage","setErrorMessage","useQuery","client","useApolloClient","addedPerson","set","object","dataInStore","readQuery","query","allPersons","id","includes","writeQuery","concat","useSubscription","onSubscriptionData","subscriptionData","personAdded","notify","setTimeout","loading","clear","resetStore","authLink","setContext","_","headers","getItem","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.dda80ed5.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\r\n\r\n const PERSON_DETAILS = gql`\r\n fragment PersonDetails on Person {\r\n    name\r\n    phone\r\n    address {\r\n        street\r\n        city\r\n    }\r\n}\r\n `\r\n\r\nexport const ALL_PERSONS = gql`\r\n {\r\n  allPersons {\r\n   ...PersonDetails\r\n  }\r\n}\r\n${PERSON_DETAILS}\r\n`\r\n\r\n\r\nexport const FIND_PERSON = gql`\r\n query findPersonByName($nameToSearch: String!) {\r\n    findPerson(name: $nameToSearch) {\r\n        ...PersonDetails\r\n        id\r\n    }\r\n}\r\n${PERSON_DETAILS}\r\n`\r\n\r\nexport const CREATE_PERSON = gql`\r\nmutation createPerson($name: String!, $street: String!, $city: String!, $phone: String) {\r\n    addPerson(\r\n        name: $name\r\n        street: $street\r\n        city: $city\r\n        phone: $phone\r\n    ) {\r\n       ...PersonDetails\r\n       id\r\n    }\r\n}\r\n${PERSON_DETAILS}\r\n`\r\nexport const EDIT_NUMBER = gql`\r\nmutation editNumber($name: String!, $phone: String!) {\r\n    editNumber(name: $name, phone: $phone) {\r\n       ...PersonDetails\r\n        id\r\n    }\r\n}\r\n${PERSON_DETAILS}\r\n`\r\n\r\nexport const LOGIN = gql`\r\nmutation login($username: String!, $password: String!){\r\n    login(username: $username, password: $password){\r\n        value\r\n    }\r\n}\r\n`\r\n\r\nexport const PERSON_ADDED = gql`\r\nsubscription {\r\n    personAdded {\r\n        ...PersonDetails\r\n    }\r\n}\r\n${PERSON_DETAILS}\r\n`\r\n\r\nexport const CREATE_USER = gql`\r\nmutation createUser($username: String!, $password: String!){\r\n    createUser(username: $username, password: $password){\r\n        username\r\n        password\r\n        id\r\n        friends\r\n    }\r\n}\r\n`","import React, { useState, useEffect } from 'react'\r\nimport { useLazyQuery } from '@apollo/client'\r\nimport { FIND_PERSON } from '../queries'\r\n\r\n\r\nconst Persons = ({persons, show, setError}) => {\r\nconst [getPerson, result] = useLazyQuery(FIND_PERSON, {\r\n    onError(error) {\r\n        setError(error)\r\n    }\r\n})\r\nconst [person, setPerson] = useState(null)\r\n\r\nconst showPerson = (name) => {\r\n    getPerson({ variables: { nameToSearch: name}})\r\n}\r\n\r\nuseEffect(() => {\r\n    if (result.data) {\r\n        setPerson(result.data.findPerson)\r\n    }\r\n}, [result])\r\n\r\nif (person) {\r\n    return(\r\n        <div>\r\n            <h2>{person.name}</h2>\r\n            <div>{person.address.street} {person.address.city}</div>\r\n            <div>{person.phone}</div>\r\n            <button onClick={() => setPerson(null)}>close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nif (!show) {\r\n    return null\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <h2>Persons</h2>\r\n            {persons.map(p => \r\n                <div key={p.name}>\r\n                    {p.name} {p.phone}\r\n                    <button onClick={() => showPerson(p.name)}>\r\n                        show address\r\n                    </button>\r\n                </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons\r\n","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_PERSON } from '../queries'\r\n\r\n\r\n\r\nconst PersonForm = ({ setError, updateCacheWith, show }) => {\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [street, setStreet] = useState('')\r\n    const [city, setCity] = useState('')\r\n\r\n    const [ createPerson ] = useMutation(CREATE_PERSON, {\r\n        //refetchQueries: [{ query: ALL_PERSONS }],\r\n        onError: (error) => {\r\n            setError(error.graphQLErrors[0].message)\r\n        },\r\n        update: (store, response) => {\r\n            updateCacheWith(response.data.addPerson)\r\n        }\r\n    })\r\n\r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n\r\n        createPerson({ variables: { name,street, city, phone: phone.length > 0 ? phone : null}})\r\n\r\n        setName('')\r\n        setPhone('')\r\n        setStreet('')\r\n        setCity('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Create New</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    name <input value={name}\r\n                    onChange={({target}) => setName(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    phone <input value={phone}\r\n                    onChange={({target}) => setPhone(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    street <input value={street}\r\n                    onChange={({target}) => setStreet(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    city <input value={city}\r\n                    onChange={({target}) => setCity(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm\r\n","import React from 'react'\r\n\r\nconst Notify = ({errorMessage}) => {\r\n    if (!errorMessage) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={{ color: 'red'}}>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notify\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nimport { EDIT_NUMBER } from '../queries'\r\n\r\nconst PhoneForm = ({setError, show}) => {\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n\r\n    const [changeNumber, result] = useMutation(EDIT_NUMBER)\r\n\r\n    useEffect(() => {\r\n        if (result.data && result.data.editNumber === null) {\r\n            setError('Person not found')\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [result.data])\r\n\r\n    if (!show) {\r\n        return null\r\n    }\r\n\r\n    const submit = (event) => {\r\n        event.preventDefault()\r\n\r\n        changeNumber({ variables: {name, phone}})\r\n\r\n        setName('')\r\n        setPhone('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Change Number</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    name <input value={name}\r\n                    onChange={({target}) => setName(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    phone <input value={phone}\r\n                    onChange={({target}) => setPhone(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>change number</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PhoneForm\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { LOGIN } from '../queries'\r\n\r\n\r\nconst LoginForm = ({ setError, setToken, show}) => {\r\nconst [username, setUsername] = useState('')\r\nconst [password, setPassword] = useState('')\r\n\r\n\r\nconst [ login, result ] = useMutation(LOGIN, {\r\n    onError: (error) => {\r\n        setError(error.graphQLErrors[0]?.message)\r\n    }\r\n})\r\n\r\nuseEffect(() => {\r\n    if (result.data) {\r\n        const token = result.data.login.value\r\n        setToken(token)\r\n        localStorage.setItem('phonenumbers-user-token', token)\r\n    }\r\n// eslint-disable-next-line react-hooks/exhaustive-deps\r\n}, [result.data])\r\n\r\nif (!show) {\r\n    return null\r\n}\r\n\r\nconst submit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    login({ variables: { username, password}})\r\n}\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h2>Login</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    username \r\n                    <input \r\n                    value={username}\r\n                    onChange={({target})=> setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    password\r\n                    <input\r\n                    value={password}\r\n                    onChange={({target})=> setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { CREATE_USER } from '../queries'\r\n\r\n\r\nconst RegisterForm = ({ setError, show}) => {\r\nconst [username, setUsername] = useState('')\r\nconst [password, setPassword] = useState('')\r\n\r\n\r\nconst [ createUser ] = useMutation(CREATE_USER, {\r\n    onError: (error) => {\r\n        setError(error.graphQLErrors[0].message)\r\n    }\r\n})\r\n\r\nif (!show) {\r\n    return null\r\n}\r\n\r\nconst submit = async (event) => {\r\n    event.preventDefault()\r\n\r\n    createUser({ variables: { username, password}})\r\n}\r\n\r\n    return (\r\n        <div>\r\n        <h2>Register</h2>\r\n            <form onSubmit={submit}>\r\n                <div>\r\n                    username \r\n                    <input \r\n                    value={username}\r\n                    onChange={({target})=> setUsername(target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    password\r\n                    <input\r\n                    value={password}\r\n                    onChange={({target})=> setPassword(target.value)}\r\n                    />\r\n                </div>\r\n                <button type='submit'>login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n","import React, { useState } from 'react'\nimport { useQuery, useApolloClient, useSubscription } from '@apollo/client'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport { ALL_PERSONS, PERSON_ADDED } from './queries'\nimport Notify from './components/Notify'\nimport PhoneForm from './components/PhoneForm'\nimport LoginForm from './components/LoginForm'\nimport RegisterForm from './components/RegisterForm'\n\n\nconst App = () => {\n  const [page, setPage] = useState('login')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [token, setToken] = useState(null)\n\n  const result = useQuery(ALL_PERSONS)\n  const client = useApolloClient()\n\n  const updateCacheWith = (addedPerson) => {\n    const includedIn = ( set, object) => \n    set.map(p => p.id).includes(object.id)\n    const dataInStore = client.readQuery({ query: ALL_PERSONS })\n    if (!includedIn(dataInStore.allPersons, addedPerson)) {\n      client.writeQuery({\n        query: ALL_PERSONS,\n        data: { allPersons : dataInStore.allPersons.concat(addedPerson)}\n      })\n    }\n  }\n\n\n  useSubscription(PERSON_ADDED, {\n    onSubscriptionData: ({ subscriptionData }) => {\n      const addedPerson = subscriptionData.data.personAdded\n      notify(`${addedPerson.name} added`)\n      updateCacheWith(addedPerson)\n    }\n  })\n\n  const notify = (message) => {\n    setErrorMessage(message)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 10000)\n  }\n\n  if (result.loading) {\n    return <div>loading...</div>\n  }\n\n\n  const logout = () => {\n    setToken(null)\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  \n  return (\n    <div>\n      <div>\n        <button onClick={() => setPage('persons')}>persons</button>\n        <button onClick={() => setPage('register')}>register</button>\n      {token === null ? (<button onClick={() => setPage('login')}>login</button>)\n      : (<div> <button onClick={() => setPage('addPerson')}>add person</button>\n      <button onClick={() => setPage('addPhone')}>add phone</button>\n        <button onClick={logout}>logout</button>\n        </div>)}\n      </div>\n      <div>\n      <Notify errorMessage={errorMessage} />\n      </div>\n     <Persons \n     show={page === 'persons'}\n     setError={notify}\n     persons = {result.data?.allPersons} />\n    \n    <PersonForm \n    show={page === 'addPerson'}\n    setError={notify} \n    updateCacheWith={updateCacheWith}\n    />\n\n    <PhoneForm \n    show={page === 'addPhone'}\n    setError={notify}\n    />\n\n    <LoginForm\n    show={page === 'login'}\n      setToken={setToken}\n      setError={notify}\n      />\n\n    <RegisterForm \n    show={page === 'register'}\n      setError={notify}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ApolloClient, ApolloProvider,  HttpLink, InMemoryCache, split } from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\n\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('phonenumbers-user-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: '/graphql'})\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql`,\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n})\n\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}